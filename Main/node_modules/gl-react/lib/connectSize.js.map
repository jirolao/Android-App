{"version":3,"file":"connectSize.js","names":["connectSize","GLComponent","Component","getGLSize","props","width","height","context","glSizable","cw","ch","getChildContext","render","onConnectSizeComponentRef","displayName","name","PropTypes","number","object","isRequired"],"sources":["../src/connectSize.js"],"sourcesContent":["//@flow\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A High Order Component (HOC) function that provides\n * the contextual `width` and `height` props to a GL Component.\n * It also merge optional width,height props to override the contextual size\n * @function connectSize\n * @param GLComponent - a React Component that receives width and height props\n * @returns {ReactClass<*>} a Component that merge width and height props\n * with context and renders `GLComponent`.\n * @example\n *  const Foo = ({ width, height }) => <Node uniforms={{ width, height }} />;\n *  const FooConnected = connectSize(Foo);\n *  <FooConnected /> // you don't have to provide width, height.\n *  <FooConnected width={64} height={64} /> // If you do, you override width,height in the context as well, so <Node> is implicitly receiving the new width/height.\n */\nconst connectSize = (GLComponent: *) =>\n  class extends Component<{\n    width?: number,\n    height?: number,\n    children?: any,\n    onConnectSizeComponentRef?: (ref: GLComponent) => void,\n  }> {\n    context: {\n      glSizable: { +getGLSize: () => [number, number] },\n    };\n    static displayName = `connectSize(${\n      GLComponent.displayName || GLComponent.name || \"?\"\n    })`;\n    static propTypes = {\n      width: PropTypes.number,\n      height: PropTypes.number,\n    };\n    static contextTypes = {\n      glSizable: PropTypes.object.isRequired,\n    };\n    static childContextTypes = {\n      glSizable: PropTypes.object.isRequired,\n    };\n    getGLSize(): [number, number] {\n      const {\n        props: { width, height },\n        context: { glSizable },\n      } = this;\n      if (width && height) return [width, height];\n      const [cw, ch] = glSizable.getGLSize();\n      return [width || cw, height || ch];\n    }\n    getChildContext() {\n      return {\n        glSizable: this,\n      };\n    }\n    render() {\n      const { onConnectSizeComponentRef } = this.props;\n      const [width, height] = this.getGLSize();\n      return (\n        <GLComponent\n          ref={onConnectSizeComponentRef}\n          {...this.props}\n          width={width}\n          height={height}\n        />\n      );\n    }\n  };\n\nexport default connectSize;\n"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAIC,WAAD;EAAA;;EAAA,gBAClB,cAAcC,gBAAd,CAKG;IAAA;MAAA;;MAAA;IAAA;;IAiBDC,SAAS,GAAqB;MAC5B,MAAM;QACJC,KAAK,EAAE;UAAEC,KAAF;UAASC;QAAT,CADH;QAEJC,OAAO,EAAE;UAAEC;QAAF;MAFL,IAGF,IAHJ;MAIA,IAAIH,KAAK,IAAIC,MAAb,EAAqB,OAAO,CAACD,KAAD,EAAQC,MAAR,CAAP;MACrB,MAAM,CAACG,EAAD,EAAKC,EAAL,IAAWF,SAAS,CAACL,SAAV,EAAjB;MACA,OAAO,CAACE,KAAK,IAAII,EAAV,EAAcH,MAAM,IAAII,EAAxB,CAAP;IACD;;IACDC,eAAe,GAAG;MAChB,OAAO;QACLH,SAAS,EAAE;MADN,CAAP;IAGD;;IACDI,MAAM,GAAG;MACP,MAAM;QAAEC;MAAF,IAAgC,KAAKT,KAA3C;MACA,MAAM,CAACC,KAAD,EAAQC,MAAR,IAAkB,KAAKH,SAAL,EAAxB;MACA,oBACE,6BAAC,WAAD;QACE,GAAG,EAAEU;MADP,GAEM,KAAKT,KAFX;QAGE,KAAK,EAAEC,KAHT;QAIE,MAAM,EAAEC;MAJV,GADF;IAQD;;EA1CA,CANe,yCAUM,eACpBL,WAAW,CAACa,WAAZ,IAA2Bb,WAAW,CAACc,IAAvC,IAA+C,GAChD,GAZe,wCAaG;IACjBV,KAAK,EAAEW,kBAAA,CAAUC,MADA;IAEjBX,MAAM,EAAEU,kBAAA,CAAUC;EAFD,CAbH,2CAiBM;IACpBT,SAAS,EAAEQ,kBAAA,CAAUE,MAAV,CAAiBC;EADR,CAjBN,gDAoBW;IACzBX,SAAS,EAAEQ,kBAAA,CAAUE,MAAV,CAAiBC;EADH,CApBX;AAAA,CAApB;;eAmDenB,W"}