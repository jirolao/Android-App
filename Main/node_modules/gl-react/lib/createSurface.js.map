{"version":3,"file":"createSurface.js","names":["__DEV__","process","env","NODE_ENV","SurfacePropTypes","children","PropTypes","any","isRequired","style","preload","array","onLoad","func","onLoadError","onContextLost","onContextRestored","visitor","object","surfaceId","_instances","list","slice","allSurfaceProps","Object","keys","GLView","RenderLessElement","mapRenderableContent","requestFrame","cancelFrame","Surface","Component","ready","rebootId","debug","_needsRedraw","_draw","gl","onSuccess","setState","_handleLoad","e","_handleError","_prepareGL","props","_stopLoop","_destroyGL","root","_onContextLost","_onContextRestored","_handleRestoredSuccess","_handleRestoredFailure","ref","glView","console","error","redraw","flush","_startLoop","warn","getGLName","getChildContext","glParent","glSurface","glSizable","componentDidMount","push","getVisitors","forEach","v","onSurfaceMount","componentWillUnmount","i","indexOf","splice","onSurfaceUnmount","componentDidUpdate","render","state","rest","key","_onRef","_onContextCreate","_onContextFailure","rebootForDebug","Visitors","get","concat","getGLSize","drawingBufferWidth","drawingBufferHeight","id","getGLShortName","captureAsDataURL","args","invariant","displayName","name","captureAsBlob","capture","x","y","w","h","glIsAvailable","getEmptyTexture","_emptyTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","deleteTexture","loaderResolver","dispose","k","shaders","deleteBuffer","buffer","map","onSurfaceGLContextChange","onError","LoaderResolver","pixelStorei","UNPACK_FLIP_Y_WEBGL","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","all","raw","loader","input","_resolveTextureLoader","loadedAlready","load","_preparingGL","length","Promise","then","_addGLNodeChild","node","_addDependent","_removeGLNodeChild","resolve","_makeShader","frag","vert","shader","createShader","attributes","pointer","_getShader","shaderId","Shaders","getName","_bindRootNode","bindFramebuffer","FRAMEBUFFER","width","height","viewport","_loopRaf","loop","visitors","onSurfaceDrawSkipped","onSurfaceDrawStart","beforeDraw","silent","onSurfaceDrawError","debugError","longMessage","afterDraw","onSurfaceDrawEnd"],"sources":["../src/createSurface.js"],"sourcesContent":["//@flow\nimport invariant from \"invariant\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport createShader from \"gl-shader\";\nimport Bus from \"./Bus\";\nimport Shaders from \"./Shaders\";\nimport Visitors from \"./Visitors\";\nimport { LoaderResolver } from \"webgltexture-loader\";\nimport type { NDArray } from \"ndarray\";\nimport type { ShaderIdentifier, ShaderInfo } from \"./Shaders\";\nimport type { Shader } from \"gl-shader\";\nimport type { VisitorLike } from \"./Visitor\";\nimport type { WebGLTextureLoader } from \"webgltexture-loader\";\nimport type Node from \"./Node\";\n\nconst __DEV__ = process.env.NODE_ENV === \"development\";\n\ntype SurfaceProps = {\n  children?: any,\n  style?: Object,\n  preload?: Array<mixed>,\n  onLoad?: () => void,\n  onLoadError?: (e: Error) => void,\n  onContextLost?: () => void,\n  onContextRestored?: () => void,\n  visitor?: VisitorLike,\n};\n\ninterface ISurface extends Component<SurfaceProps, *> {\n  props: SurfaceProps;\n  gl: ?WebGLRenderingContext;\n  RenderLessElement: React$ComponentType<*>;\n  root: ?Node;\n  id: number;\n\n  +mapRenderableContent: ?(inst: mixed) => mixed;\n  +getVisitors: () => Array<VisitorLike>;\n  +getGLSize: () => [number, number];\n  +getGLName: () => string;\n  +getGLShortName: () => string;\n  +captureAsDataURL: (...args: any) => string;\n  +captureAsBlob: (...args: any) => Promise<Blob>;\n  +capture: (x?: number, y?: number, w?: number, h?: number) => NDArray;\n  +redraw: () => void;\n  +flush: () => void;\n  +getEmptyTexture: () => WebGLTexture;\n  +glIsAvailable: () => boolean;\n\n  +rebootForDebug: () => void;\n  +_addGLNodeChild: (node: Node) => void;\n  +_removeGLNodeChild: (node: Node) => void;\n  +_resolveTextureLoader: (\n    raw: any\n  ) => { loader: ?WebGLTextureLoader<*>, input: mixed };\n  +_getShader: (shaderId: ShaderIdentifier) => Shader;\n  +_makeShader: (shaderInfo: ShaderInfo) => Shader;\n  +_draw: () => void;\n  +_bindRootNode: () => void;\n}\n\nexport type Surface = ISurface;\n\nexport type SurfaceContext = {\n  glParent: Node | Surface | Bus,\n  glSurface: Surface,\n  glSizable: { +getGLSize: () => [number, number] },\n};\n\nconst SurfacePropTypes = {\n  children: PropTypes.any.isRequired,\n  style: PropTypes.any,\n  preload: PropTypes.array,\n  onLoad: PropTypes.func,\n  onLoadError: PropTypes.func,\n  onContextLost: PropTypes.func,\n  onContextRestored: PropTypes.func,\n  visitor: PropTypes.object,\n};\n\nlet surfaceId = 0;\nconst _instances: Array<ISurface> = [];\nexport const list = (): Array<ISurface> => _instances.slice(0);\n\nconst allSurfaceProps = Object.keys(SurfacePropTypes);\n\ntype SurfaceOpts = {\n  GLView: *,\n  RenderLessElement: React$ComponentType<*>,\n  mapRenderableContent?: (instance: mixed) => mixed,\n  requestFrame: (f: Function) => number,\n  cancelFrame: (id: number) => void,\n};\n\nexport default ({\n  GLView,\n  RenderLessElement,\n  mapRenderableContent,\n  requestFrame,\n  cancelFrame,\n}: SurfaceOpts): Class<ISurface> => {\n  /**\n   * **Renders the final tree of [Node](#node) in a WebGL Canvas / OpenGLView /...**\n   *\n   * `<Surface>` performs the final GL draws for a given implementation.\n   *\n   * `width` and `height` props are required for `gl-react-dom` and `gl-react-headless`, but are not supported for React Native, where the paradigm is to use `style` (and either use flexbox or set a width/height from there).\n   *\n   * > Surface is the only component that isn't \"universal\",\n   * therefore **Surface is exposed by the platform implementation**\n   * (`gl-react-dom` / `gl-react-native` / ...),\n   * unlike the rest of the API exposed through `gl-react`.\n   * Each platform have its own implementation but most props are shared.\n   * If you write a gl-react library, you shouldn't use `<Surface>` but only\n   * let the final user doing it. Therefore your code should remain platform-independant.\n   *\n   * @class Surface\n   * @extends Component\n   * @prop {any} children - a tree of React Element that renders some [Node](#node) and/or [Bus](#bus).\n   * @prop {number} [width] **(only for DOM)** - width of the Surface. multiplied by `pixelRatio` for the actual canvas pixel size.\n   * @prop {number} [height] **(only for DOM)** - height of the Surface. multiplied by `pixelRatio` for the actual canvas pixel size.\n   * @prop {object} [style] - CSS styles that get passed to the underlying `<canvas/>` or `<View/>`\n   * @prop {Array<any>} [preload] - an array of things to preload before the Surface start rendering. Help avoiding blinks and providing required textures to render an initial state.\n   * @prop {function} [onLoad] - a callback called when Surface is ready and just after it rendered.\n   * @prop {function(error:Error):void} [onLoadError] - a callback called when the Surface was not able to load initially.\n   * @prop {function} [onContextLost] - a callback called when the Surface context was lost.\n   * @prop {function} [onContextRestored] - a callback called when the Surface was restored and ready.\n   * @prop {Visitor} [visitor] - an internal visitor used for logs and tests.\n   *\n   * @prop {WebGLContextAttributes} [webglContextAttributes] **(gl-react-dom only)** a optional set of attributes to init WebGL with.\n   * @prop {number} [pixelRatio=window.devicePixelRatio] **(gl-react-dom only)** allows to override the pixelRatio. (default `devicePixelRatio`)\n   *\n   * @example\n   *\n   *  <Surface width={300} height={200}>\n   *    <Node shader={shaders.helloGL} />\n   *  </Surface>\n   *\n   * @example\n   *\n   *  <Surface width={200} height={100}>\n   *    <HelloGL />\n   *  </Surface>\n   *\n   * @example\n   *\n   *  <Surface width={200} height={100}>\n   *    <Blur factor={2}>\n   *      <Negative>\n   *        https://i.imgur.com/wxqlQkh.jpg\n   *      </Negative>\n   *    </Blur>\n   *  </Surface>\n   */\n  return class Surface extends Component<\n    SurfaceProps,\n    {\n      ready: boolean,\n      rebootId: number,\n      debug: boolean,\n    }\n  > {\n    id: number = ++surfaceId;\n    gl: ?WebGLRenderingContext;\n    buffer: WebGLBuffer;\n    loaderResolver: ?LoaderResolver;\n    glView: *;\n    root: ?Node;\n    shaders: { [key: string]: Shader } = {};\n    _preparingGL: Array<*> = [];\n    _needsRedraw: boolean = false;\n    state = {\n      ready: false,\n      rebootId: 0,\n      debug: false,\n    };\n\n    RenderLessElement = RenderLessElement;\n    mapRenderableContent = mapRenderableContent;\n\n    static propTypes = SurfacePropTypes;\n    static childContextTypes: { [_: $Keys<SurfaceContext>]: any } = {\n      glSurface: PropTypes.object.isRequired,\n      glParent: PropTypes.object.isRequired,\n      glSizable: PropTypes.object.isRequired,\n    };\n\n    getChildContext(): SurfaceContext {\n      return {\n        glParent: this,\n        glSurface: this,\n        glSizable: this,\n      };\n    }\n\n    componentDidMount() {\n      _instances.push(this);\n      this.getVisitors().forEach((v) => v.onSurfaceMount(this));\n    }\n\n    componentWillUnmount() {\n      this._stopLoop();\n      this._destroyGL();\n      const i = _instances.indexOf(this);\n      if (i !== -1) _instances.splice(i, 1);\n      this.getVisitors().forEach((v) => v.onSurfaceUnmount(this));\n    }\n\n    componentDidUpdate() {\n      this.redraw();\n    }\n\n    render() {\n      const {\n        props,\n        state: { ready, rebootId, debug },\n      } = this;\n      const { children, style } = props;\n\n      // We allow to pass-in all props we don't know so you can hook to DOM events.\n      const rest = {};\n      Object.keys(props).forEach((key) => {\n        if (allSurfaceProps.indexOf(key) === -1) {\n          rest[key] = props[key];\n        }\n      });\n\n      return (\n        <GLView\n          key={rebootId}\n          debug={debug}\n          ref={this._onRef}\n          onContextCreate={this._onContextCreate}\n          onContextFailure={this._onContextFailure}\n          onContextLost={this._onContextLost}\n          onContextRestored={this._onContextRestored}\n          style={style}\n          {...rest}\n        >\n          {ready ? children : null}\n        </GLView>\n      );\n    }\n\n    rebootForDebug() {\n      // FIXME: there is a bug somewhere that breaks rendering if this is called at startup time.\n      this._stopLoop();\n      this._destroyGL();\n      this.setState(({ rebootId }) => ({\n        rebootId: rebootId + 1,\n        ready: false,\n        debug: true,\n      }));\n    }\n\n    getVisitors(): Array<VisitorLike> {\n      return Visitors.get().concat(this.props.visitor || []);\n    }\n\n    getGLSize(): [number, number] {\n      const { gl } = this;\n      return [gl ? gl.drawingBufferWidth : 0, gl ? gl.drawingBufferHeight : 0];\n    }\n\n    getGLName(): string {\n      return `Surface#${this.id}`;\n    }\n\n    getGLShortName(): string {\n      return \"Surface\";\n    }\n\n    /**\n     * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n     * @param {string} mimeType (optional) the image MimeType\n     * @param {number} quality (optional) the image quality\n     * @memberof Surface\n     * @instance\n     */\n    captureAsDataURL(...args: any): string {\n      const { glView } = this;\n      invariant(glView, \"GLView is mounted\");\n      invariant(\n        glView.captureAsDataURL,\n        \"captureAsDataURL is not defined in %s\",\n        GLView.displayName || GLView.name\n      );\n      return glView.captureAsDataURL(...args);\n    }\n\n    /**\n     * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n     * @param {string} mimeType (optional) the image MimeType\n     * @param {number} quality (optional) the image quality\n     * @memberof Surface\n     * @instance\n     */\n    captureAsBlob(...args: any): Promise<Blob> {\n      const { glView } = this;\n      invariant(glView, \"GLView is mounted\");\n      invariant(\n        glView.captureAsBlob,\n        \"captureAsBlob is not defined in %s\",\n        GLView.displayName || GLView.name\n      );\n      return glView.captureAsBlob(...args);\n    }\n\n    /**\n     * capture the root Node pixels. Make sure you have set `preserveDrawingBuffer: true` in `webglContextAttributes` prop.\n     * @memberof Surface\n     * @instance\n     */\n    capture(x?: number, y?: number, w?: number, h?: number): NDArray {\n      invariant(\n        this.root,\n        \"Surface#capture: surface is not yet ready or don't have any root Node\"\n      );\n      return this.root.capture(x, y, w, h);\n    }\n\n    /**\n     * Schedule a redraw of the Surface.\n     * @memberof Surface\n     * @instance\n     * @function\n     */\n    redraw = (): void => {\n      this._needsRedraw = true;\n    };\n\n    /**\n     * Force the redraw (if any) to happen now, synchronously.\n     * @memberof Surface\n     * @instance\n     * @function\n     */\n    flush = (): void => {\n      this._draw();\n    };\n\n    glIsAvailable(): boolean {\n      return !!this.gl;\n    }\n\n    _emptyTexture: ?WebGLTexture;\n    getEmptyTexture(): WebGLTexture {\n      let { gl, _emptyTexture } = this;\n      invariant(gl, \"getEmptyTexture called while gl was not defined\");\n      if (!_emptyTexture) {\n        this._emptyTexture = _emptyTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, _emptyTexture);\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          2,\n          2,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n        );\n      }\n      return _emptyTexture;\n    }\n\n    _onContextCreate = (gl: WebGLRenderingContext): void => {\n      const onSuccess = () => {\n        this.setState(\n          {\n            ready: true,\n          },\n          () => {\n            try {\n              this._handleLoad();\n            } catch (e) {\n              this._handleError(e);\n            }\n          }\n        );\n      };\n      this._prepareGL(gl, onSuccess, this._handleError);\n    };\n\n    _onContextFailure = (e: Error): void => {\n      this._handleError(e);\n    };\n\n    _onContextLost = (): void => {\n      if (this.props.onContextLost) this.props.onContextLost();\n      this._stopLoop();\n      this._destroyGL();\n      if (this.root) this.root._onContextLost();\n    };\n\n    _onContextRestored = (gl: WebGLRenderingContext) => {\n      if (this.root) this.root._onContextRestored(gl);\n      this._prepareGL(\n        gl,\n        this._handleRestoredSuccess,\n        this._handleRestoredFailure\n      );\n    };\n\n    _destroyGL() {\n      const { gl } = this;\n      if (gl) {\n        this.gl = null;\n        if (this._emptyTexture) {\n          gl.deleteTexture(this._emptyTexture);\n          this._emptyTexture = null;\n        }\n        if (this.loaderResolver) {\n          this.loaderResolver.dispose();\n        }\n        for (let k in this.shaders) {\n          this.shaders[k].dispose();\n        }\n        this.shaders = {};\n        gl.deleteBuffer(this.buffer);\n        this.getVisitors().map((v) => v.onSurfaceGLContextChange(this, null));\n      }\n    }\n\n    _prepareGL(\n      gl: WebGLRenderingContext,\n      onSuccess: () => void,\n      onError: (e: Error) => void\n    ) {\n      this.gl = gl;\n      this.getVisitors().map((v) => v.onSurfaceGLContextChange(this, gl));\n\n      this.loaderResolver = new LoaderResolver(gl);\n\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n\n      const buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(\n        gl.ARRAY_BUFFER,\n        new Float32Array([-1, -1, -1, 4, 4, -1]), // see a-big-triangle\n        gl.STATIC_DRAW\n      );\n      this.buffer = buffer;\n\n      const { preload } = this.props;\n\n      const all: Array<Promise<*>> = [];\n\n      (preload || []).forEach((raw) => {\n        if (!raw) {\n          console.warn(\"Can't preload value\", raw);\n          return;\n        }\n        const { loader, input } = this._resolveTextureLoader(raw);\n        if (!loader) {\n          console.warn(\"Can't preload input\", raw, input);\n          return;\n        }\n        const loadedAlready = loader.get(input);\n        if (loadedAlready) return;\n        all.push(loader.load(input));\n      });\n\n      this._preparingGL = all;\n\n      if (all.length > 0) {\n        Promise.all(all).then(onSuccess, onError); // FIXME make sure this never finish if _prepareGL is called again.\n      } else {\n        onSuccess();\n      }\n    }\n\n    _onRef = (ref: ?GLView): void => {\n      this.glView = ref;\n    };\n\n    _addGLNodeChild(node: Node): void {\n      invariant(\n        !this.root,\n        \"Surface can only contains a single root. Got: %s\",\n        this.root && this.root.getGLName()\n      );\n      this.root = node;\n      node._addDependent(this);\n      this.redraw();\n    }\n    _removeGLNodeChild(node: Node): void {\n      this.root = null;\n      this.redraw();\n    }\n\n    _handleError = (e: Error): void => {\n      const { onLoadError } = this.props;\n      if (onLoadError) onLoadError(e);\n      else {\n        console.error(e);\n      }\n    };\n\n    _handleRestoredFailure = (): void => {\n      // there is nothing we can do. it's a dead end.\n    };\n\n    _handleRestoredSuccess = (): void => {\n      this.redraw();\n      this.flush();\n      this._startLoop();\n      if (this.props.onContextRestored) this.props.onContextRestored();\n    };\n\n    _handleLoad = (): void => {\n      if (!this.root) {\n        console.warn(\n          this.getGLName() + \" children does not contain any discoverable Node\"\n        );\n      }\n      const { onLoad } = this.props;\n      this.redraw();\n      this.flush();\n      this._startLoop();\n      if (onLoad) onLoad();\n    };\n\n    _resolveTextureLoader(\n      raw: mixed\n    ): { loader: ?WebGLTextureLoader<*>, input: any } {\n      let input = raw;\n      let loader: ?WebGLTextureLoader<*> =\n        this.loaderResolver && this.loaderResolver.resolve(input);\n      return { loader, input };\n    }\n\n    _makeShader({ frag, vert }: ShaderInfo, name?: string): Shader {\n      const { gl } = this;\n      invariant(gl, \"gl is not available\");\n      const shader = createShader(gl, vert, frag);\n      for (let key in shader.attributes) {\n        shader.attributes[key].pointer();\n      }\n      return shader;\n    }\n\n    _getShader(shaderId: ShaderIdentifier): Shader {\n      const { shaders } = this;\n      return (\n        shaders[shaderId.id] ||\n        (shaders[shaderId.id] = this._makeShader(\n          Shaders.get(shaderId),\n          Shaders.getName(shaderId)\n        ))\n      );\n    }\n\n    _bindRootNode(): void {\n      const { gl } = this;\n      invariant(gl, \"gl context not available\");\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      const [width, height] = this.getGLSize();\n      gl.viewport(0, 0, width, height);\n    }\n\n    _loopRaf: any;\n    _startLoop(): void {\n      cancelFrame(this._loopRaf);\n      const loop = () => {\n        this._loopRaf = requestFrame(loop);\n        if (this._needsRedraw) this._draw();\n      };\n      this._loopRaf = requestFrame(loop);\n    }\n\n    _stopLoop(): void {\n      cancelFrame(this._loopRaf);\n    }\n\n    _draw(): void {\n      const { gl, root, glView } = this;\n      invariant(glView, \"GLView is mounted\");\n      const visitors = this.getVisitors();\n      if (!gl || !root || !this._needsRedraw) {\n        visitors.forEach((v) => v.onSurfaceDrawSkipped(this));\n        return;\n      }\n      this._needsRedraw = false;\n      visitors.forEach((v) => v.onSurfaceDrawStart(this));\n      if (glView.beforeDraw) glView.beforeDraw(gl);\n      try {\n        root._draw();\n      } catch (e) {\n        let silent = false;\n        visitors.forEach((v) => {\n          silent = v.onSurfaceDrawError(e) || silent;\n        });\n        if (!silent) {\n          if (\n            __DEV__ &&\n            glView.debugError &&\n            e.longMessage /* duck typing an \"interesting\" GLError (from lib gl-shader) */\n          ) {\n            glView.debugError(e);\n          } else {\n            console.warn(e);\n            throw e;\n          }\n        }\n        return;\n      }\n      if (glView.afterDraw) glView.afterDraw(gl);\n      visitors.forEach((v) => v.onSurfaceDrawEnd(this));\n    }\n  };\n};\n"],"mappings":"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"}