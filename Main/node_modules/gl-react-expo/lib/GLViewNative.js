"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _expoGl = require("expo-gl");

const _excluded = ["style", "onContextCreate", "children"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class GLViewNative extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "ref", void 0);

    _defineProperty(this, "onRef", ref => {
      this.ref = ref;
    });

    _defineProperty(this, "onContextCreate", gl => {
      const {
        getExtension
      } = gl; // monkey patch to get a way to access the EXGLView
      // $FlowFixMe

      gl.getExtension = name => {
        if (name === "GLViewRef") return this.ref;
        return getExtension.call(gl, name);
      };

      this.props.onContextCreate(gl);
    });

    _defineProperty(this, "capture", opt => {
      const {
        ref
      } = this;
      if (!ref) return Promise.reject(new Error("glView is unmounted"));
      return ref.takeSnapshotAsync(opt);
    });
  }

  afterDraw(gl) {
    gl.flush(); // $FlowFixMe

    gl.endFrameEXP();
  }

  render() {
    const _this$props = this.props,
          {
      style,
      onContextCreate,
      children
    } = _this$props,
          rest = _objectWithoutProperties(_this$props, _excluded);

    if (__DEV__) {
      if ("width" in rest || "height" in rest) {
        console.warn("gl-react-expo <Surface>: no such width/height prop. instead you must use the style prop like for a <View>.");
      }
    }

    return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({}, rest, {
      style: [{
        position: "relative",
        overflow: "hidden"
      }, style]
    }), /*#__PURE__*/_react.default.createElement(_expoGl.GLView, {
      style: [style, {
        flex: 1,
        position: "absolute",
        top: 0,
        left: 0
      }],
      onContextCreate: this.onContextCreate,
      ref: this.onRef
    }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: {
        opacity: 0
      }
    }, children));
  }

}

exports.default = GLViewNative;
//# sourceMappingURL=GLViewNative.js.map