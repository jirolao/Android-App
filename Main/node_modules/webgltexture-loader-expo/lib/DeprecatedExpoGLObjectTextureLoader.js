"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webgltextureLoader = require("webgltexture-loader");

var _expoModulesCore = require("expo-modules-core");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const neverEnding = new Promise(() => {});
const available = !!(_expoModulesCore.NativeModulesProxy.ExponentGLObjectManager && _expoModulesCore.NativeModulesProxy.ExponentGLObjectManager.createObjectAsync);
let warned = false;

class ExpoGLObjectTextureLoader extends _webgltextureLoader.WebGLTextureLoaderAsyncHashCache {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "objIds", new WeakMap());
  }

  canLoad(input) {
    if (!available && !warned) {
      warned = true;
      console.log("webgltexture-loader-expo: ExponentGLObjectManager.createObjectAsync is not available. Make sure to use the correct version of Expo");
    }

    return available && typeof input === "object";
  }

  disposeTexture(texture) {
    const exglObjId = this.objIds.get(texture);

    if (exglObjId) {
      _expoModulesCore.NativeModulesProxy.ExponentGLObjectManager.destroyObjectAsync(exglObjId);
    }

    this.objIds.delete(texture);
  }

  inputHash(config) {
    // JSON.stringify is a quick way to hash the config object
    return JSON.stringify(config);
  }

  loadNoCache(config) {
    const {
      gl
    } = this; // $FlowFixMe

    const {
      __exglCtxId: exglCtxId
    } = gl;
    let disposed = false;

    const dispose = () => {
      disposed = true;
    };

    const promise = _expoModulesCore.NativeModulesProxy.ExponentGLObjectManager.createObjectAsync({
      exglCtxId,
      texture: config
    }).then(({
      exglObjId
    }) => {
      if (disposed) return neverEnding; // $FlowFixMe

      const texture = new WebGLTexture(exglObjId);
      this.objIds.set(texture, exglObjId);
      const width = 0;
      const height = 0; // ^ unfortunately there is no way to retrieve these

      return {
        texture,
        width,
        height
      };
    });

    return {
      promise,
      dispose
    };
  }

}

_defineProperty(ExpoGLObjectTextureLoader, "priority", -200);

_webgltextureLoader.globalRegistry.add(ExpoGLObjectTextureLoader);

var _default = ExpoGLObjectTextureLoader;
exports.default = _default;
//# sourceMappingURL=DeprecatedExpoGLObjectTextureLoader.js.map